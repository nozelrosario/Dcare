angular.module('dataStore.services', ['pouchdb'])
/**
* A Data Store service service that interacts with pouch DB for providing Data.
* Phonegap api to be plugged in for sqlite support
*/

    /* General Key Points to Remember
    *  @  never reject() defered call during data pull/fetch operation.Instead use resolve(null)
    *  @  reject() defered call during data push operation is ok.
    */

.service('DataStore', function (pouchDB, $q, $log) {
    this.dataStore = null;
    var PouchDBConfig = {
        // General config options for Pouch DB
        auto_compaction: true
    };


    this.initDataStore = function (dataStoreName) {
        if (dataStoreName) {
            this.dataStoreName = dataStoreName;
            this.dataStore = pouchDB(dataStoreName, PouchDBConfig);
        } else {
            alert('Please specify the data store name');
        }        
    };
    
    this.getDataStore = function () {
        if (this.dataStore) {
            return this.dataStore;
        } else {
            alert("Date Store not initialized");
            return null;
        }        
    };

    /* Generates a new unique ID based on existing records in DB
     * [Similar to auto increment / Identity column]
    */
    this.generateNewID = function () {
        var deferredQuery = $q.defer();
        var maxID,newID;
        this.getDataStore().gql({ select: "max(id)" }, function (err,data) {
            if (!err) {
                if (data.rows && data.rows.length > 0) {
                    maxID = parseInt((data.rows[0])['max(id)']);
                    newID = maxID + 1;
                    deferredQuery.resolve(newID);
                } else {
                    deferredQuery.resolve(1);
                }
                
            } else {
                deferredQuery.reject(err);
            }
        });
        return deferredQuery.promise;
    };

    /*
    * Saves Data object into DB
    * If data contains a id, existing is updated, else a new entry is created with autogenerated ID
    */
    this.save = function (data) {
        var deferredSave = $q.defer();
        if (!data.id) {
            var me = this;
            this.generateNewID().then(function (id) {
                data._id = id.toString();   // maintain _id as String
                data.id = id;              // maintain _id as Integer
                me.getDataStore().put(data).then(function (response) {
                    if (response.ok) {
                        deferredSave.resolve(data);
                    } else {
                        $log.error(err);
                        deferredSave.reject(response);
                    }
                    
                }).catch(function (err) {
                    $log.error(err);
                    deferredSave.reject(err);
                });
            }, $log.error);
        } else {
            data._id = data.id.toString();      // maintain _id as String
            this.getDataStore().put(data).then(function (response) {
                if (response.ok) {
                    deferredSave.resolve(data);
                } else {
                    $log.error(err);
                    deferredSave.reject(response);
                }
            }).catch(function (err) {
                $log.error(err);
                deferredSave.reject(err);
            });
        }
        return deferredSave.promise;
    };

    this.getDataByID = function (id) {
        var deferredFetch = $q.defer();
        if (id && id > 0) {
            this.getDataStore().get(id.toString()).then(function (data) {
                deferredFetch.resolve(data);
            }).catch(function (err) {
                $log.error("DataStore.getDataByID : error occured while querying" + this.dataStoreName + "[Error: " + err + "]");
                deferredFetch.resolve(null);
            });
        } else {
            $log.error("DataStore.getDataByID : empty id not valid returning null data");
            deferredFetch.resolve(null);
        }
        return deferredFetch.promise;
    };

    this.getRowsCount = function () {
        var deferredCount = $q.defer();
        this.getDataStore().allDocs({ include_docs: false,attachments: false }).then(function (data) {
            if (data.total_rows) {
                deferredCount.resolve(data.total_rows);
            } else {
                $log.debug("DataStore.getRowsCount : total_rows not available in response data, returning 0");
                deferredCount.resolve(0);
            }
        }).catch(function (err) {
            $log.error("DataStore.getRowsCount : error occured while querying" + this.dataStoreName + "[Error: " + err + "]");
            deferredCount.resolve(data.total_rows);
        });
        return deferredCount.promise;
    };

})



/*
* DataStore Config 
*/
.config(function (pouchDBProvider, POUCHDB_METHODS) {

    var PouchDBPluginMethods = {
        // register plugin methods [currently done explicitly inside plugin script itself]
    };
    pouchDBProvider.methods = angular.extend({}, POUCHDB_METHODS, PouchDBPluginMethods);
    
});