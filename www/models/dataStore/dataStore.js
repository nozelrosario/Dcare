/* Responsible for interfacing Models With configured Physical Data Store & performing common data preprocessing operations
* NR: Done => Add provision for Triggers/Event-Listeners[Before/After(Save,insert,Delete, etc)]
*/

app.classes.data.DataStore = new Class({    
    initialize: function (config) {
        this.dataStoreName = (config.dataStoreName)? config.dataStoreName: logger.error("DataStore Name cannot be empty"),
		this.dataAdapter = (config.dataAdapter)? config.dataAdapter: "pouchDB",
		this.adapterConfig = (config.adapterConfig)? config.adapterConfig: "";
		this.dataStoreAdapter = null;
    },
    getDataStore: function () {
        if (!this.dataStoreAdapter) {
            this.dataStoreAdapter = DataAdapterFactory.getAdapter(this.dataAdapter, this.adapterConfig);
            this.dataStoreAdapter.openDataStore(this.dataStoreName);
		}
        return this.dataStoreAdapter;
    },
    /* Add a event trigger [Supports multiple Actions for a single trigger event, just call method 
     *   multiple times]
     *   @params : trigger : {string} event trigger eg. "before-save","after-delete ...etc."
     *             triggerName : unique name for the trigger.
     *             action : {function} Callback function to be executed when event triggers
     *   @example : dataStoreObject.addTrigger("before-save", "log_evt_before_save", function(evtData) { 
     *                console.log("Trigger=" + evtData.trigger + " TriggerName=" + evtData.triggerName + "Data=" + evtData.data );
     *              });
     */
    addTrigger: function (trigger, triggerName, action) {
        this.getDataStore().addTrigger(trigger, triggerName, action);
    },
    /* Removes a trigger
     *   @params : trigger : {string} event trigger eg. "before-save","after-delete ...etc."
     *             triggerName : unique name of the trigger to be removed [ skipping this argument will delete all triggers]
     *   @example :  dataStoreObject.removeTrigger("before-save", "log_evt_before_save");
     */
    removeTrigger: function (trigger, triggerName) {
        this.getDataStore().removeTrigger(trigger, triggerName);
    },
	/*
    * Saves Data object into DB
    * If data contains a id, existing is updated, else a new entry is created with autogenerated ID
    */
    save : function (data) {
        return this.getDataStore().save(data);
    },
    remove: function (id) {
        return this.getDataStore().deleteByID(id);
    },
	query: function() {
	},
	getDataByID: function(id) {
		return this.getDataStore().getDataByID(id);
	},
	getRowsCount: function() {
		return this.getDataStore().getRowsCount();
	},
	getAllRows: function() {
		return this.getDataStore().getAllRows();
	},
	search : function (query) {
		return this.getDataStore().search(query);
    },
    find : function (query) {
		return this.getDataStore().find(query);
    }
	
});

//Define an Alias for Data Store for quick Access.
var DataStore = app.classes.data.DataStore;